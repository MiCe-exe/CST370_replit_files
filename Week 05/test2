#include <iostream>
#include <vector>
#include <queue>

bool topologicalSort(int vertices, const std::vector<std::pair<int, int>>& edges) {
    std::vector<int> inDegree(vertices, 0);
    std::vector<std::vector<int>> adjacencyList(vertices);

    for (const auto& edge : edges) {
        int from = edge.first;
        int to = edge.second;

        adjacencyList[from].push_back(to);
        inDegree[to]++;
    }

    std::queue<int> q;
    int visitedVertices = 0;

    for (int i = 0; i < vertices; ++i) {
        if (inDegree[i] == 0) {
            q.push(i);
        }
    }

    std::cout << "In-degrees: ";
    for (int i = 0; i < vertices; ++i) {
        std::cout << inDegree[i] << " ";
    }
    std::cout << std::endl;

    std::cout << "Topological Order: ";
    while (!q.empty()) {
        int u = q.front();
        q.pop();

        std::cout << u << " ";
        visitedVertices++;

        for (int v : adjacencyList[u]) {
            inDegree[v]--;
            if (inDegree[v] == 0) {
                q.push(v);
            }
        }
    }

    std::cout << std::endl;

    // Check if all vertices are visited
    bool isDAG = visitedVertices == vertices;

    if (isDAG) {
        std::cout << "The graph is a Directed Acyclic Graph (DAG)." << std::endl;
    } else {
        std::cout << "The graph is not a Directed Acyclic Graph (DAG)." << std::endl;
    }

    return isDAG;
}

int main() {
    int vertices, edgesCount;

    // First Input
    std::cin >> vertices;
    // Second input
    std::cin >> edgesCount;

    std::vector<std::pair<int, int>> edges;

    // Graph info.
    for (int i = 0; i < edgesCount; ++i) {
        int from, to;
        std::cin >> from >> to;
        edges.emplace_back(from, to);
    }

    topologicalSort(vertices, edges);

    return 0;
}
